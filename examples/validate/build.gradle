plugins {
  id 'com.nwalsh.gradle.relaxng.validate' version '0.9.0'
}

wrapper {
  gradleVersion = '8.0'
}

repositories {
  mavenCentral()
  mavenLocal()
}

import com.nwalsh.gradle.relaxng.validate.RelaxNGValidateTask
import com.nwalsh.gradle.relaxng.util.CollectingErrorHandler

def debugTasks = false

def rncOptions = [
  'compact': true,
]

def rngOptions = [
  'compact': false
]

defaultTasks 'valid_no_output', 'valid_output', 'valid_implicit_rnc',
'valid_explicit_rnc', 'invalid_no_fail_build', 'valid_crossref',
'invalid_crossref', 'valid_ignore_crossref', 'valid_encoding',
'valid_catalog', 'valid_no_catalog', 'feasible_no_fail_build',
'feasible_valid', 'invalid_custom_error_handler',
'invalid_redirect_errors'

task valid_no_output(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/input.xml"
  schema "${projectDir}/schema/doc.rng"
  debug debugTasks
}

task valid_output(type: RelaxNGValidateTask) {
  input "${projectDir}/src/input.xml"
  schema "${projectDir}/schema/doc.rng"
  output "${buildDir}/input.xml"
  options(rngOptions)
  debug debugTasks
}

// Debug will show you the options used for validation
task valid_implicit_rnc(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/input.xml"
  schema "${projectDir}/schema/doc.rnc"
  debug debugTasks
}

task valid_explicit_rnc(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/input.xml"
  schema "${projectDir}/schema/doc.rnc"
  compact true
  debug debugTasks
}

task invalid_custom_error_handler(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  def eh = new CollectingErrorHandler(System.out)
  input "${projectDir}/src/invalid.xml"
  schema "${projectDir}/schema/doc.rng"
  errorHandler eh
  compact false
  assertValid false
  debug debugTasks
  doLast {
    println("Errors: ${eh.errorCount()}")
  }
}

task invalid_redirect_errors(type: RelaxNGValidateTask) {
  debug true
  outputs.upToDateWhen { false }
  input "${projectDir}/src/invalid.xml"
  schema "${projectDir}/schema/doc.rng"
  errorOutput "${buildDir}/redirected.txt"
  compact false
  assertValid false
  debug debugTasks
}

task invalid_no_fail_build(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/invalid.xml"
  schema "${projectDir}/schema/doc.rng"
  compact false
  assertValid false
  debug debugTasks
}

task valid_crossref(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/crossref.xml"
  schema "${projectDir}/schema/idref.rnc"
  options(rncOptions)
  debug debugTasks
}

task invalid_crossref(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/invalidref.xml"
  schema "${projectDir}/schema/idref.rnc"
  assertValid false
  debug debugTasks
}

task valid_ignore_crossref(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/invalidref.xml"
  schema "${projectDir}/schema/idref.rnc"
  idref false
  debug debugTasks
}

task valid_encoding(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/crossref.xml"
  schema "${projectDir}/schema/idref.rnc"
  // This is the schema encoding, which isn't really iso8859-1, but
  // it doesn't contain any characters that would be different if
  // it was, so it's good enough for a test
  encoding "iso8859-1"
  debug debugTasks
}

task valid_catalog(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/extid.xml"
  schema "${projectDir}/schema/idref.rnc"
  catalog "${projectDir}/src/catalog.xml"
  debug debugTasks
}

task valid_no_catalog(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/extid.xml"
  schema "${projectDir}/schema/idref.rnc"
  assertValid false
  debug debugTasks
}

task feasible_no_fail_build(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/feasible.xml"
  schema "${projectDir}/schema/doc.rng"
  assertValid false
  debug debugTasks
}

task feasible_valid(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/feasible.xml"
  schema "${projectDir}/schema/doc.rng"
  assertValid false
  feasible true
  debug debugTasks
}

task no_schema_no_fail_build(type: RelaxNGValidateTask) {
  outputs.upToDateWhen { false }
  input "${projectDir}/src/feasible.xml"
  schema "${buildDir}/does/not/exist.rng"
  assertValid false
  debug debugTasks
}

// Tasks below here cause the build to fail

task invalid(type: RelaxNGValidateTask) {
  input "${projectDir}/src/invalid.xml"
  schema "${projectDir}/schema/doc.rng"
  options(rngOptions)
  debug debugTasks
}

task schema_unloadable(type: RelaxNGValidateTask) {
  input "${projectDir}/src/input.xml"
  schema "${projectDir}/schema/doc.rng"
  compact true // this is a lie!
  debug debugTasks
}

task no_schema(type: RelaxNGValidateTask) {
  input "${projectDir}/src/feasible.xml"
  schema "${buildDir}/does/not/exist.rng"
  debug debugTasks
}
